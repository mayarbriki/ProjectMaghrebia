import { Component, OnInit } from '@angular/core';
import { IncidentService, Incident } from '../../../incident.service'; 
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { HeaderFrontComponent } from '../../header-front/header-front.component';
import jsPDF from 'jspdf';

@Component({
  selector: 'app-incident-list',
  templateUrl: './incident-list.component.html',
  styleUrls: ['./incident-list.component.scss'],
    imports: [ReactiveFormsModule, CommonModule, HeaderFrontComponent]
  
})
export class IncidentListComponent implements OnInit {
  incidents: Incident[] = [];
  isLoading = true;
  voiceTranscription: string = '';
  recognition: any;
  private addPDFPageFooter(doc: jsPDF, pageWidth: number, pageHeight: number): void {
    doc.setDrawColor(230);
    doc.setLineWidth(0.2);
    doc.line(20, pageHeight - 15, pageWidth - 20, pageHeight - 15);
  
    doc.setFontSize(10);
    doc.setTextColor(120);
    doc.text('Generated by ProjectMaghrebia • ' + new Date().toLocaleDateString(), 20, pageHeight - 10);
  }
  
  constructor(private incidentService: IncidentService) {}

  ngOnInit(): void {
    this.incidentService.getAllIncidents().subscribe({
      next: (data) => {
        this.incidents = data;
        this.isLoading = false;
      },
      error: (err) => {
        console.error('Failed to load incidents', err);
        this.isLoading = false;
      }
    });
  }


  generateIncidentPDF(data: Incident, mapImageUrl?: string): void {
    const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });
    const lineHeight = 8;
    const margin = 20;
    let y = margin;
  
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
  
    // 🟦 Header
    doc.setFontSize(18);
    doc.setTextColor(33, 37, 41);
    doc.text(' Incident Report', margin, y);
    y += 10;
  
    doc.setDrawColor(200);
    doc.line(margin, y, pageWidth - margin, y);
    y += 6;
  
    // 🟩 Body content
    doc.setFontSize(12);
    doc.setTextColor(55);
  
    const paragraphs = [
      `Date of Incident: ${data.dateOfIncident}`,
      `Title: ${data.title}`,
      data.locationDetails ? `Location: ${data.locationDetails}` : '',
      data.description ? `Description:\n${data.description}` : '',
      `Severity: ${data.severity || 'N/A'} | Category: ${data.incidentCategory || 'N/A'}`,
      data.incidentCause ? `Cause: ${data.incidentCause}` : '',
      `Contact: ${data.userEmail}${data.userPhone ? ` | Phone: ${data.userPhone}` : ''}`,
      `Police Report: ${data.policeReportFiled ? 'Yes' : 'No'} | Insurance: ${data.insuranceClaimFiled ? 'Yes' : 'No'}`,
      `Fault Acknowledged: ${data.faultAcknowledged ? 'Yes' : 'No'} | Needs Assessment: ${data.needsAssessment ? 'Yes' : 'No'}`,
      `Submitted at: ${data.submittedAt ?? new Date().toISOString()}`
    ];
    
  
    paragraphs.forEach(p => {
      if (p) {
        const lines = doc.splitTextToSize(p, pageWidth - margin * 2);
        if (y + lines.length * lineHeight > pageHeight - 20) {
          this.addPDFPageFooter(doc, pageWidth, pageHeight);
          doc.addPage();
          y = margin;
        }
        doc.text(lines, margin, y);
        y += lines.length * lineHeight + 4;
      }
    });
  
    // 🗺️ Map image if available
    if (mapImageUrl && data.latitude && data.longitude) {
      const image = new Image();
      image.crossOrigin = 'anonymous';
      image.src = mapImageUrl;
  
      image.onload = () => {
        if (y + 70 > pageHeight - 20) {
          this.addPDFPageFooter(doc, pageWidth, pageHeight);
          doc.addPage();
          y = margin;
        }
        doc.setFontSize(13);
        doc.setTextColor(33);
        doc.text('🗺️ Map Preview', margin, y);
        y += 5;
        doc.addImage(image, 'PNG', margin, y, pageWidth - margin * 2, 60);
        y += 65;
  
        this.addPDFPageFooter(doc, pageWidth, pageHeight);
        doc.save(`incident-report-${data.title}.pdf`);
      };
  
      image.onerror = () => {
        console.error('Map image failed to load. Saving PDF without map.');
        this.addPDFPageFooter(doc, pageWidth, pageHeight);
        doc.save(`incident-report-${data.title}.pdf`);
      };
    } else {
      this.addPDFPageFooter(doc, pageWidth, pageHeight);
      doc.save(`incident-report-${data.title}.pdf`);
    }
  }
  
  

    generateLocationIQStaticImageUrl(lat: number, lng: number): string {
      const apiKey = 'pk.62f59925984db03f65104b771e7244a0'; // Use your actual key
      return `https://maps.locationiq.com/v3/staticmap?key=${apiKey}&center=${lat},${lng}&zoom=18&size=600x400&markers=icon:large-red-cutout|${lat},${lng}`;
    }
    
    generateDamageAssessmentPDF(incident: Incident, assessment: string): void {
      const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });
      const margin = 20;
      let y = margin;
      const pageWidth = doc.internal.pageSize.getWidth();
      const pageHeight = doc.internal.pageSize.getHeight();
  
      doc.setFontSize(18);
      doc.setTextColor(33, 37, 41);
      doc.text('Damage Assessment Report', margin, y);
      y += 10;
      doc.setDrawColor(200);
      doc.line(margin, y, pageWidth - margin, y);
      y += 8;
  
      doc.setFontSize(12);
      const property = (incident as any).property || {};
  
      // 🔍 Risk score calculation
      let riskScore = 0;
      if (incident.severity === 'Critical') riskScore += 30;
      if (incident.severity === 'High') riskScore += 20;
      if (property.estimatedValue && property.estimatedValue > 100000) riskScore += 20;
      if (property.year && property.year < new Date().getFullYear() - 10) riskScore += 10;
      if (property.constructionType && property.constructionType.toLowerCase().includes('wood')) riskScore += 15;
      if (property.smoker === true) riskScore += 10;
  
      const details: string[] = [
        `Incident Title: ${incident.title}`,
        `Description: ${incident.description}`,
        `Date: ${incident.dateOfIncident}`,
        `Category: ${incident.incidentCategory}`,
        `Severity: ${incident.severity}`,
        incident.incidentCause && `Cause: ${incident.incidentCause}`,
        incident.locationDetails && `Location: ${incident.locationDetails}`,
        property.type && `Property Type: ${property.type}`,
        property.estimatedValue && `Estimated Value: ${property.estimatedValue} TND`,
        property.squareFootage && `Square Footage: ${property.squareFootage} m²`,
        property.yearBuilt && `Year Built: ${property.yearBuilt}`,
        property.constructionType && `Construction Type: ${property.constructionType}`,
        property.make && `Car Make: ${property.make}`,
        property.model && `Car Model: ${property.model}`,
        property.year && `Car Year: ${property.year}`,
        property.licensePlate && `License Plate: ${property.licensePlate}`,
        property.vin && `VIN: ${property.vin}`,
        property.businessName && `Business Name: ${property.businessName}`,
        property.annualRevenue && `Annual Revenue: ${property.annualRevenue}`,
        property.numberOfEmployees && `Employees: ${property.numberOfEmployees}`,
        property.destination && `Destination: ${property.destination}`,
        property.departureDate && `Departure Date: ${property.departureDate}`,
        property.returnDate && `Return Date: ${property.returnDate}`,
        property.travelPurpose && `Travel Purpose: ${property.travelPurpose}`,
        property.fullName && `Full Name: ${property.fullName}`,
        property.dateOfBirth && `Date of Birth: ${property.dateOfBirth}`,
        property.occupation && `Occupation: ${property.occupation}`,
        typeof property.smoker === 'boolean' && `Smoker: ${property.smoker ? 'Yes' : 'No'}`,
        '',
        ` Risk Score: ${riskScore}/100`,
        '',
        ' Suggested Action:',
        assessment
      ].filter(Boolean);
  
      details.forEach(line => {
        const lines = doc.splitTextToSize(line, pageWidth - margin * 2);
        doc.text(lines, margin, y);
        y += lines.length * 8 + 4;
      });
  
      this.addPDFPageFooter(doc, pageWidth, pageHeight);
      doc.save(`assessment-${incident.title}.pdf`);
    }
  
    getAssessment(incident: Incident): void {
      const incidentId = (incident as any)['id'];
      if (!incidentId) {
        alert('Incident ID missing. Cannot assess.');
        return;
      }
  
      this.incidentService.getAssessment(incidentId).subscribe({
        next: (result: string) => this.generateDamageAssessmentPDF(incident, result),
        error: (err) => alert('Failed to assess incident: ' + err.message)
      });
    }
  
  
  
  
  
}
